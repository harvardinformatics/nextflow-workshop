// Global parameters
params {
    samplesheet = "samplesheet.txt"
    input_dir = "data"
    outdir = "results"
    run_lines = true
    run_words = true
    run_aggregate = true
}

// Process configuration
process {
    // Default resources for all processes
    cpus = 1
    memory = '1 GB'
    time = '10m'
    
    // Process-specific configurations
    withName: 'COUNT_LINES' {
        cpus = 1
        memory = '512 MB'
        time = '10m'
    }
    
    withName: 'COUNT_WORDS' {
        cpus = 2
        memory = '1 GB'
        time = '10m'
    }
    
    withName: 'COMBINE_COUNTS' {
        cpus = 1
        memory = '256 MB'
        time = '10m'
    }
    
    withName: 'AGGREGATE' {
        cpus = 1
        memory = '512 MB'
        time = '10m'
    }
}

// Execution profiles
profiles {
    conda {
        conda.enabled = true
        conda.channels = ['conda-forge', 'bioconda', 'defaults']
        conda.useMamba = true
    }
    
    docker {
        docker.enabled = true
    }
    
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
    
    high_cpu {
        process {
            withName: 'COUNT_WORDS' {
                cpus = 4
                memory = '2 GB'
            }
        }
    }
    
    low_memory {
        process {
            memory = '256 MB'
            withName: 'COUNT_WORDS' {
                memory = '512 MB'
            }
        }
    }
}

// Reporting configuration
timeline {
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    overwrite = true
    file = "${params.outdir}/pipeline_info/execution_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes'
}

dag {
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']
